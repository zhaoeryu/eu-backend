<script setup lang="ts">
import { computed, nextTick, useTemplateRef } from 'vue';
import { ElMessage, type FormInstance } from 'element-plus';

import { add, update } from '@/api/${apiPath}';
import useVisible from '@/hooks/visible';
import useLoading from '@/hooks/loading';
import { useResettableReactive } from '@/hooks/resettable';
import type { ${ClassName} } from '@/types/${apiPath}';
#if($enums)
import { #foreach($item in $enums)${item}#if($foreach.hasNext), #end#end } from '@/utils/business-enums';
#end

#if($dicts)
defineOptions({
  dicts: [#foreach($item in $dicts)'${item}'#if($foreach.hasNext), #end#end],
});
#end

const DEFAULT_FORM = {
  id: null,
#foreach($column in $columns)
#if($column.formShow && $column.javaField != 'id')
  $column.javaField: null,
#end
#end
};
const rules = {
#foreach($column in $columns)
#if($column.formShow && $column.notNull)
  $column.javaField: [{ required: true, message: '${column.finalColumnComment}不能为空', trigger: 'change' }],
#end
#end
};

const emit = defineEmits(['complete']);

const refForm = useTemplateRef<FormInstance>('refForm');
const { visible, setVisible } = useVisible(false);
const { loading: formLoading, setLoading: setFormLoading } = useLoading(false);
const [state, reset] = useResettableReactive({
  form: {
    ...DEFAULT_FORM,
  },
});

const title = computed(() => {
  return state.form.id ? '修改${tableComment}' : '新增${tableComment}';
});

function open(row: ${ClassName}) {
  reset();
  state.form = Object.assign({ ...DEFAULT_FORM }, row);
  setVisible(true);
}

function onSubmit() {
  refForm.value?.validate((valid) => {
    if (!valid) {
      return;
    }

    setFormLoading(true);
    const reqPromise = state.form.id ? update(state.form) : add(state.form);
    reqPromise
      .then(() => {
        ElMessage.success(state.form.id ? '修改成功' : '新增成功');
        setVisible(false);
        emit('complete');
      })
      .finally(() => {
        setFormLoading(false);
      });
  });
}

async function onDialogOpen() {
  await nextTick(() => {
    if (refForm.value) {
      refForm.value.clearValidate();
    }
  });
}

function onReset() {
  if (refForm.value) {
    refForm.value.resetFields();
  }
}

defineExpose({
  open,
});
</script>

<template>
  <el-dialog v-model="visible" :title="title" :close-on-click-modal="false" width="800px" @open="onDialogOpen">
    <el-form ref="refForm" :model="state.form" :rules="rules" label-width="120px">
#foreach($column in $columns)
#if($column.formShow)
    #vue3ElFormItem($column false "      ")
#end
#end
    </el-form>
    <template #footer>
      <el-button @click="onReset">重 置</el-button>
      <el-button :loading="formLoading" class="eu-submit-btn" type="primary" @click="onSubmit">确 定</el-button>
    </template>
  </el-dialog>
</template>
