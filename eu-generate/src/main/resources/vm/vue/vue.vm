<script>
import { page, batchDel } from '@/api/${apiPath}'
import ${ClassName}EditDialog from './${ClassName}EditDialog.vue'
export default {
  name: '${ClassName}',
#if($dicts)
  dicts: [#foreach($item in $dicts)'${item}'#if($foreach.hasNext), #end#end],
#end
  components: { ${ClassName}EditDialog },
  data() {
    return {
      loading: false,
      list: [],
      total: 0,

      queryParams: {
#foreach($column in $columns)
#if($column.queryType)
        $column.javaField: null,
#end
#end
        page: 1,
        size: 10,
        sort: []
      },

      isQueryShow: true,
      multipleDisabled: true,
    }
  },
  mounted() {
    this.onRefresh()
  },
  methods: {
    onQuery() {
      this.loading = true
      page(this.queryParams).then(res => {
        this.list = res.data.records
        this.total = res.data.total
      }).finally(() => {
        this.loading = false
      })
    },
    onRefresh() {
      this.queryParams = this.$options.data().queryParams
      this.onQuery()
    },
    onAdd() {
      this.$refs.${className}EditDialog.open()
    },
    onExport() {
      this.$download('/api/${apiPath}/export', this.queryParams, `${tableComment}#[[_${new Date().getTime()}.xlsx`]]#)
    },
    onBatchDel() {
      #[[const ids = this.$refs.table.selection.map(item => item.id)]]#
      this.$confirm(this.$t('general.confirm.delete.batch.message', { length: ids.length }), this.$t('general.confirm.title'), {
        confirmButtonText: this.$t('general.confirm.confirm'),
        cancelButtonText: this.$t('general.confirm.cancel'),
        type: 'warning',
        beforeClose: (action, instance, done) => {
          if (action === 'confirm') {
            instance.confirmButtonLoading = true;
            batchDel(ids).then(() => {
              #[[this.$message.success(this.$t('general.confirm.delete.success'))]]#
              done()
              this.onRefresh()
            }).finally(() => {
              instance.confirmButtonLoading = false;
            })
          } else {
            done()
          }
        }
      });
    },
    onSelectionChange(selection) {
      this.multipleDisabled = !selection.length
    },
    onRowUpdate(row) {
      this.$refs.${className}EditDialog.open(row)
    },
    onRowDelete(row) {
      this.$confirm(this.$t('general.confirm.delete.message', { key: row.$delShowField }), this.$t('general.confirm.title'), {
        confirmButtonText: this.$t('general.confirm.confirm'),
        cancelButtonText: this.$t('general.confirm.cancel'),
        type: 'warning',
        beforeClose: (action, instance, done) => {
          if (action === 'confirm') {
            instance.confirmButtonLoading = true;
            batchDel([row.id]).then(() => {
              #[[this.$message.success(this.$t('general.confirm.delete.success'))]]#
              done()
              this.onRefresh()
            }).finally(() => {
              instance.confirmButtonLoading = false;
            })
          } else {
            done()
          }
        }
      });
    },
    onSortComplete() {
      this.queryParams.page = this.$options.data().queryParams.page
      this.onQuery()
    }
  },
}
</script>

<template>
  <div class="page-container">
    <div class="page-body">
      <query-expand-wrapper :show="isQueryShow">
        <el-form :model="queryParams" :inline="true">
#foreach($column in $columns)
#if($column.queryType)
    #elFormItem($column true "          ")
#end
#end
          <el-form-item>
            <el-button type="primary" icon="el-icon-search" @click="onQuery">{{ $t('general.query.search') }}</el-button>
            <el-button icon="el-icon-refresh" plain @click="onRefresh">{{ $t('general.query.reset') }}</el-button>
          </el-form-item>
        </el-form>
      </query-expand-wrapper>
      <div v-loading="loading">
        <eu-table-toolbar
          :multiple-disabled="multipleDisabled"
          :opt-show="{
            import: false
          }"
          :permission="{
            add: ['${permissionPrefix}:add'],
            del: ['${permissionPrefix}:del'],
            export: ['${permissionPrefix}:export'],
          }"
          :sort.sync="queryParams.sort"
          :ref-table="$refs.table"
          @add="onAdd"
          @batchDel="onBatchDel"
          @export="onExport"
          @refresh="onRefresh"
          :searchToggle.sync="isQueryShow"
          @sort="onSortComplete"
        />
        <el-table
          ref="table"
          :data="list"
          @selection-change="onSelectionChange"
          style="width: 100%"
        >
          <el-table-column type="selection"></el-table-column>
#foreach($column in $columns)
#if($column.tableShow)
          <el-table-column
            prop="${column.javaField}"
    #if($i18nEnable)
            :label="$t('${tableName}.field.${column.javaField}')"
    #else
            label="#if($column.finalColumnComment)$column.finalColumnComment#else$column.javaField#end"
    #end
          ></el-table-column>
#end
#end
          <el-table-column v-permissions="['${permissionPrefix}:edit', '${permissionPrefix}:del']" :label="$t('general.column.operation')">
            <template #default="{ row }">
              <el-button v-permissions="['${permissionPrefix}:edit']" type="text" @click="onRowUpdate(row)">{{ $t('general.edit') }}</el-button>
              <el-button v-permissions="['${permissionPrefix}:del']" type="text" @click="onRowDelete(row)">{{ $t('general.del') }}</el-button>
            </template>
          </el-table-column>
        </el-table>
        <pagination
          :total="total"
          :page.sync="queryParams.page"
          :limit.sync="queryParams.size"
          @pagination="onQuery"
        />
      </div>
    </div>

    <${classNameKebabCase}-edit-dialog ref="${className}EditDialog" @complete="onRefresh" />

  </div>
</template>