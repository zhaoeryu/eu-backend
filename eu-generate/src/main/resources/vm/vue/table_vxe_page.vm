<script>
import { page, batchDel } from '@/api/${apiPath}'
import TableColumnSettingMixin from '@/mixins/TableColumnSettingMixin'
export default {
  name: '${ClassName}',
  mixins: [TableColumnSettingMixin(['table'])],
#if($dicts)
  dicts: [#foreach($item in $dicts)'${item}'#if($foreach.hasNext), #end#end],
#end
  components: { },
  data() {
    return {
      loading: false,
      list: [],
      total: 0,

      queryParams: {
#foreach($column in $columns)
#if($column.queryType)
        $column.javaField: null,
#end
#end
        page: 1,
        size: 10,
        sort: []
      },

      isQueryShow: true,
      multipleDisabled: true,
    }
  },
  mounted() {
    this.onRefresh()
  },
  methods: {
    onQuery() {
      this.loading = true
      page(this.queryParams).then(res => {
        this.list = res.data.records
        this.total = res.data.total
      }).finally(() => {
        this.loading = false
      })
    },
    onRefresh() {
      this.queryParams = this.$options.data().queryParams
      this.onQuery()
    },
    onAdd() {
      #[[this.$router.push(this.$route.path + '/add')]]#
    },
    onExport() {
      this.download('/api/${apiPath}/export', this.queryParams, `${tableComment}#[[_${new Date().getTime()}.xlsx`]]#)
    },
    onBatchDel() {
      #[[const ids = this.$refs.table.getCheckboxRecords().map(item => item.id)]]#
      this.$confirm(this.$t('general.confirm.delete.batch.message', { length: ids.length }), this.$t('general.confirm.title'), {
        confirmButtonText: this.$t('general.confirm.confirm'),
        cancelButtonText: this.$t('general.confirm.cancel'),
        type: 'warning',
        beforeClose: (action, instance, done) => {
          if (action === 'confirm') {
            instance.confirmButtonLoading = true;
            batchDel(ids).then(() => {
              #[[this.$message.success(this.$t('general.confirm.delete.success'))]]#
              done()
              this.onRefresh()
            }).finally(() => {
              instance.confirmButtonLoading = false;
            })
          } else {
            done()
          }
        }
      });
    },
    onSelectionChange({ records }) {
      this.multipleDisabled = !records.length
    },
    onRowUpdate(row) {
      #[[this.$router.push(this.$route.path + `/edit/${row.id}`)]]#
    },
    onRowDelete(row) {
      this.$confirm(this.$t('general.confirm.delete.message', { key: row.$delShowField }), this.$t('general.confirm.title'), {
        confirmButtonText: this.$t('general.confirm.confirm'),
        cancelButtonText: this.$t('general.confirm.cancel'),
        type: 'warning',
        beforeClose: (action, instance, done) => {
          if (action === 'confirm') {
            instance.confirmButtonLoading = true;
            batchDel([row.id]).then(() => {
              #[[this.$message.success(this.$t('general.confirm.delete.success'))]]#
              done()
              this.onRefresh()
            }).finally(() => {
              instance.confirmButtonLoading = false;
            })
          } else {
            done()
          }
        }
      });
    },
    onSortComplete() {
      this.queryParams.page = this.$options.data().queryParams.page
      this.onQuery()
    }
  },
}
</script>

<template>
  <div class="page-container">
    <div class="page-body">
      <query-expand-wrapper :show="isQueryShow">
        <el-form :model="queryParams" :inline="true">
#foreach($column in $columns)
#if($column.areaQuery)
          <el-form-item
    #if($i18nEnable)
            :label="$t('${tableName}.field.${column.javaField}')"
    #else
            label="#if($column.columnComment)$column.columnComment#else$column.javaField#end"
    #end
            prop="${column.javaField}"
          >
    #elTableQueryItem($column "          ")
          </el-form-item>
#end
#end
          <el-form-item>
            <el-button type="primary" icon="el-icon-search" @click="onQuery">{{ $t('general.query.search') }}</el-button>
            <el-button icon="el-icon-refresh" plain @click="onRefresh">{{ $t('general.query.reset') }}</el-button>
          </el-form-item>
        </el-form>
      </query-expand-wrapper>
      <div>
        <eu-table-toolbar
          :multiple-disabled="multipleDisabled"
          :opt-show="{
            import: false
          }"
          :permission="{
            add: ['${permissionPrefix}:add'],
            del: ['${permissionPrefix}:del'],
            export: ['${permissionPrefix}:export'],
          }"
          :sort.sync="queryParams.sort"
          :ref-table="$refs.table"
          @add="onAdd"
          @batchDel="onBatchDel"
          @export="onExport"
          @refresh="onRefresh"
          :searchToggle.sync="isQueryShow"
          @sort="onSortComplete"
        />
        <vxe-table
          id="table"
          border
          resizable
          show-overflow
          ref="table"
          :loading="loading"
          :data="list"
          :row-config="{isHover: true}"
          @checkbox-all="onSelectionChange"
          @checkbox-change="onSelectionChange"
          :custom-config="customConfig"
        >
          <vxe-column type="checkbox" width="40" fixed="left"></vxe-column>
#foreach($column in $columns)
#if($column.tableShow)
#if($column.tableHeaderQuery)
          <vxe-colgroup
    #if($i18nEnable)
            :title="$t('${tableName}.field.${column.javaField}')"
    #else
            title="#if($column.columnComment)$column.columnComment#else$column.javaField#end"
    #end
            field="group_${column.tableShowField}"
          >
            <vxe-column
              field="${column.tableShowField}"
    #if($i18nEnable)
              :title="$t('${tableName}.field.${column.javaField}')"
    #else
              title="#if($column.columnComment)$column.columnComment#else$column.javaField#end"
    #end
              :visible="${column.defaultVisible}"
              min-width="100"
            >
              <template #header>
#if($column.queryType)
  #elTableQueryItem($column "              ")
#end
              </template>
#if($detailHeaderEnable && $column.javaField == $detailHeaderFieldKey)
              <template #default="{ row }">
                <el-link type="primary" @click="onRowUpdate(row)">{{ row.$detailHeaderFieldKey }}</el-link>
              </template>
#elseif($column.dictKey)
              <template #default="{ row }">
                {{ dict.label['${column.dictKey}'][row.${column.javaField}] || '' }}
              </template>
#elseif($column.enumKey)
              <template #default="{ row }">
                {{ $enumsParseLabel($enums.${column.enumKey}, row.${column.javaField}) }}
              </template>
#end
            </vxe-column>
          </vxe-colgroup>
#else
          <vxe-column
            field="${column.tableShowField}"
    #if($i18nEnable)
            :title="$t('${tableName}.field.${column.javaField}')"
    #else
            title="#if($column.columnComment)$column.columnComment#else$column.javaField#end"
    #end
            :visible="${column.defaultVisible}"
            min-width="100"
          >
#if($column.dictKey)
            <template #default="{ row }">
              {{ dict.label['${column.dictKey}'][row.${column.javaField}] || '' }}
            </template>
#elseif($column.enumKey)
            <template #default="{ row }">
              {{ $enumsParseLabel($enums.${column.enumKey}, row.${column.javaField}) }}
            </template>
#end
          </vxe-column>
#end
#end
#end
          <vxe-column v-permissions="['${permissionPrefix}:edit', '${permissionPrefix}:del']" :field="$tableColumnField.operation" :title="$t('general.column.operation')" min-width="130" :show-overflow="false" fixed="right">
            <template #default="{ row }">
              <el-button v-permissions="['${permissionPrefix}:edit']" type="text" @click="onRowUpdate(row)">{{ $t('general.edit') }}</el-button>
              <el-button v-permissions="['${permissionPrefix}:del']" type="text" @click="onRowDelete(row)">{{ $t('general.del') }}</el-button>
            </template>
          </vxe-column>
        </vxe-table>
        <pagination
          :total="total"
          :page.sync="queryParams.page"
          :limit.sync="queryParams.size"
          @pagination="onQuery"
        />
      </div>
    </div>

  </div>
</template>
